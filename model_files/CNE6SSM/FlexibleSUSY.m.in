FSModelName = "@CLASSNAME@";
FSEigenstates = SARAH`EWSB;

(* cNE6SSM using alternate FPI algorithm *)

MINPAR = { {1, m0},
           {2, m12},
           {3, TanBeta},
           {4, Sign[\[Lambda]]},
	   {5, Azero}
};

(* In this version, we will choose \[Lambda] as an EWSB output *)
(* Also we will leave the bilinear soft terms as EXTPAR inputs *)
EXTPAR = { {65, ssumInput},
           {72, QS}
};

(* Note that this generates a warning of vsb not being fixed *)
(* by any constraints, but should not be a problem.          *)
EWSBOutputParameters = {vs, \[Lambda], vphi, \[Xi]F, L[\[Xi]F]};

SUSYScale = Sqrt[Product[M[Su[i]]^(Abs[ZU[i,3]]^2 + Abs[ZU[i,6]]^2), {i,6}]];

SUSYScaleFirstGuess = Sqrt[m0^2 + 4 m12^2];

SUSYScaleInput = {};

HighScale = g1 == g2;

HighScaleFirstGuess = 2.0 10^16;

HighScaleInput = {
   {g1p, g1},
   {\[Mu]Pr, LHInput[\[Mu]Pr]},
   {B[\[Mu]Pr], LHInput[B[\[Mu]Pr]]},
   {MuPhi, LHInput[MuPhi]},
   {B[MuPhi], LHInput[B[MuPhi]]},
   {\[Sigma]L, LHInput[\[Sigma]L]},
   {\[Kappa]Pr, LHInput[\[Kappa]Pr]},
   {\[Sigma], LHInput[\[Sigma]]},
   {gD, LHInput[gD]},
   {hE, LHInput[hE]},
   {\[Kappa], LHInput[\[Kappa]]},
   {\[Lambda]12, LHInput[\[Lambda]12]},
   {fu, LHInput[fu]},
   {fd, LHInput[fd]},
   {T[Ye], Azero*Ye},
   {T[Yd], Azero*Yd},
   {T[Yu], Azero*Yu},
   {T[\[Kappa]Pr], Azero*LHInput[\[Kappa]Pr]},
   {T[\[Sigma]], Azero*LHInput[\[Sigma]]},
   {T[hE], Azero*LHInput[hE]},
   {T[\[Sigma]L], Azero*LHInput[\[Sigma]L]},
   {T[gD], Azero*LHInput[gD]},
   {T[fu], Azero*LHInput[fu]},
   {T[fd], Azero*LHInput[fd]},
   {T[\[Kappa]], Azero*LHInput[\[Kappa]]},
   {T[\[Lambda]12], Azero*LHInput[\[Lambda]12]},
   {T[\[Lambda]], Azero*\[Lambda]},
   {mHd2, m0^2},
   {mHu2, m0^2},
   {ms2, m0^2}, 
   {msbar2, m0^2},
   {mphi2, m0^2},
   {mHp2, m0^2},
   {mHpbar2, m0^2},
   {mH1I2, UNITMATRIX[2] m0^2},
   {mH2I2, UNITMATRIX[2] m0^2},
   {mSI2, UNITMATRIX[3] m0^2},
   {mq2, UNITMATRIX[3] m0^2},
   {ml2, UNITMATRIX[3] m0^2},
   {md2, UNITMATRIX[3] m0^2},
   {mu2, UNITMATRIX[3] m0^2},
   {me2, UNITMATRIX[3] m0^2},
   {mDx2, UNITMATRIX[3] m0^2},
   {mDxbar2, UNITMATRIX[3] m0^2},  
   {MassB, m12},
   {MassWB, m12},
   {MassG, m12}, 
   {MassBp, m12}
};

LowScale = SM[MZ];

LowScaleFirstGuess = SM[MZ];

LowScaleInput = {
   {Yu, Automatic},
   {Yd, Automatic},
   {Ye, Automatic},
   {vd, 2 MZDRbar / Sqrt[GUTNormalization[g1]^2 g1^2 + g2^2] Cos[ArcTan[TanBeta]]},
   {vu, 2 MZDRbar / Sqrt[GUTNormalization[g1]^2 g1^2 + g2^2] Sin[ArcTan[TanBeta]]}
};

(* Provide initial guess for \[Xi]F? *)
InitialGuessAtLowScale = {
  {vd, SM[vev] Cos[ArcTan[TanBeta]]},
  {vu, SM[vev] Sin[ArcTan[TanBeta]]},
  {Yu, Automatic},
  {Yd, Automatic},
  {Ye, Automatic},
  {\[Xi]F, SM[MZ]^3},
  {L[\[Xi]F], SM[MZ]^3},
  {\[Lambda], 0.1},
  {vs, ssumInput / Sqrt[2]},
  {vsb, ssumInput / Sqrt[2]},
  {vphi, ssumInput}
};

InitialGuessAtHighScale = {};

(* Not sure that using NMSSM expressions is valid here *) 
(* UseHiggs2LoopNMSSM = True; *)
(* Can specify if necessary *)
(* EffectiveMu = \[Lambda] vs / Sqrt[2]; *)

DefaultPoleMassPrecision = MediumPrecision;
HighPoleMassPrecision = {hh, Ah, Hpm};
MediumPoleMassPrecision = {};
LowPoleMassPrecision = {};

